//@version=5
// Copyright (c) 2024-present, Tonni Diaz
// Includes Chandelier Exit, ZLSMA, SMA20 & SMA50
indicator('Tu Indicator', shorttitle='TB Ind', overlay=true) 

var string calcGroup = 'Calculation'
length = input.int(title='ATR Period', defval=1, group=calcGroup)
mult = input.float(title='ATR Multiplier', step=0.1, defval=2.0, group=calcGroup)
useClose = input.bool(title='Use Close Price for Extremums', defval=true, group=calcGroup)

//zlsmaLength = input.int(title="ZLSMA Length", defval=32)
//zlsmaOffset = input.int(title="ZLSMA Offset", defval=0)
//src = input(close, title="ZLSMA Source")
//lsma = ta.linreg(src, zlsmaLength, zlsmaOffset)
//lsma2 = ta.linreg(lsma, zlsmaLength, zlsmaOffset)
//eq= lsma-lsma2
//zlsma = lsma+eq

//plot(zlsma, color=color.yellow, linewidth=3)


var string visualGroup = 'Visuals'
showLabels = input.bool(title='Show Buy/Sell Labels', defval=true, group=visualGroup)
highlightState = input.bool(title='Highlight State', defval=true, group=visualGroup)

var string alertGroup = 'Alerts'
awaitBarConfirmation = input.bool(title="Await Bar Confirmation", defval=true, group=alertGroup)

atr = mult * ta.atr(length)

longStop = (useClose ? ta.highest(close, length) : ta.highest(length)) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = (useClose ? ta.lowest(close, length) : ta.lowest(length)) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

var color longColor = color.green
var color shortColor = color.red
var color longFillColor = color.new(color.green, 90)
var color shortFillColor = color.new(color.red, 90)
var color textColor = color.new(color.white, 0)

//longStopPlot = plot(dir == 1 ? longStop : na, title='Long Stop', style=plot.style_linebr, linewidth=2, color=color.new(longColor, 0))
buySignal = dir == 1 and dir[1] == -1
//plotshape(buySignal ? longStop : na, title='Long Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(longColor, 0))
plotshape(buySignal and showLabels ? longStop : na, title='Buy Label', text='Buy', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(longColor, 0), textcolor=textColor)

roundStringify(x) => str.tostring(math.round(x))

spacing = 9000

//shortStopPlot = plot(dir == 1 ? na : shortStop, title='Short Stop', style=plot.style_linebr, linewidth=2, color=color.new(shortColor, 0))
sellSignal = dir == -1 and dir[1] == 1
//plotshape(sellSignal ? shortStop : na, title='Short Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(shortColor, 0))
plotshape(sellSignal and showLabels ? shortStop : na, title='Sell Label', text='Sell', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(shortColor, 0), textcolor=textColor)

    
log.info( str.tostring(close) + ' ' + str.tostring(longStop) + ' ' + str.tostring(shortStop) + ' ' + str.tostring(buySignal) + ' ' + str.tostring(sellSignal))

midPricePlot = plot(ohlc4, title='', style=plot.style_circles, linewidth=0, display=display.none, editable=false)

longStateFillColor = highlightState ? dir == 1 ? longFillColor : na : na
shortStateFillColor = highlightState ? dir == -1 ? shortFillColor : na : na
//fill(midPricePlot, longStopPlot, title='Long State Filling', color=longStateFillColor)
//fill(midPricePlot, shortStopPlot, title='Short State Filling', color=shortStateFillColor)

await = awaitBarConfirmation ? barstate.isconfirmed : true
alertcondition(dir != dir[1] and await, title='Alert: CE Direction Change', message='Chandelier Exit has changed direction!')
alertcondition(buySignal and await, title='Alert: CE Buy', message='Chandelier Exit Buy!')
alertcondition(sellSignal and await, title='Alert: CE Sell', message='Chandelier Exit Sell!')



/// SMA20 && SMA50

sma_len = input.int(1, minval=1, title="SMA_20 Length")
sma_src = input(close, title="SMA Source")
sma_offset = input.int(title="SMA Offset", defval=0, minval=-500, maxval=500, display = display.data_window)
sma_out = ta.sma(sma_src, sma_len)
plot(sma_out, color=color.orange, title="MA", offset=sma_offset, linewidth = 2)

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

typeMA = input.string(title = "SMA Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing", display = display.data_window)
smoothingLength = input.int(title = "SMA Length", defval = 5, minval = 1, maxval = 100, group="Smoothing", display = display.data_window)

smoothingLine = ma(sma_out, smoothingLength, typeMA)
plot(smoothingLine, title="SMA Smoothing Line", color=#f37f20, offset=sma_offset, display=display.none)


sma_len2 = input.int(2, minval=1, title="SMA_50 Length")
out2 = ta.sma(sma_src, sma_len2)
plot(out2, color=color.blue, linewidth = 2, title="MA2", offset=sma_offset)

smoothingLine2 = ma(out2, smoothingLength, typeMA)
plot(smoothingLine2, title="Smoothing Line2", color=#f37f20, offset=sma_offset, display=display.none)