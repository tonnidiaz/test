/**
* Generated by Tu
* Author: Tonni Diaz
*/

import createError from 'http-errors';
import express from 'express';
import path from 'path';
import cookieParser from 'cookie-parser';
import logger from 'morgan';
import cors from 'cors';
import dotenv from 'dotenv';
import indexRouter from './routes';
import { TuConfig } from '@cmn/models';
import { addBooksTask, connectMongo, scheduleAllTasks } from '@cmn/utils/funcs4';
import { localApi } from '@cmn/utils/api';
import { DEV } from '@cmn/utils/constants';

const app = express();

dotenv.config();
// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');
console.log(`\nPID: ${process.pid}\n`);
app.use(cors());
app.use(
  cors({
    origin: '*',
  })
);
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render('error');
});


const init = async () => {
    try{
await connectMongo(DEV)
        const config = await TuConfig.findOne({}).exec() || new TuConfig()
    await config.save()
    const r = await localApi().get('/tasks')
    console.log(r.data)
    return
        await scheduleAllTasks()
    if (config.fetch_orderbook_enabled)
        addBooksTask(config)
    }
    catch(e){ 
        console.log("Init error", e)
    }
}

init()

export default app;

